<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="700" height="100%"
		 creationComplete="init()">
<fx:Script>
	<![CDATA[
		import com.afcomponents.umap.core.UMap;
		import com.afcomponents.umap.display.markermanager.MarkerManager;
		import com.afcomponents.umap.events.MapEvent;
		import com.afcomponents.umap.overlays.Marker;
		import com.afcomponents.umap.providers.cloudmade.CloudMadeProvider;
		import com.afcomponents.umap.styles.BaloonStyle;
		import com.afcomponents.umap.styles.GeometryStyle;
		import com.afcomponents.umap.styles.MarkerStyle;
		import com.afcomponents.umap.types.LatLng;
		import com.afcomponents.umap.types.LatLngBounds;
		
		import markers.SignMarker;
		
		import model.Model;
		
		import mx.core.UIComponent;
		import mx.events.FlexEvent;
		
		import spark.skins.spark.VSliderTrackSkin;
		
		//manages when more than 1 marker is in the same location		
		private var markerManager:MarkerManager;
		//colour of the multi marker flag
		private var multiMarkerColor:Number = 0xffffff;
		
		private var provider:CloudMadeProvider;
		public var map:UMap;
		private var apiKey:String = "eeb21660abf954a4ab61b8e5be7dd542";
		
		//used to display viewing stats
		private var salesCount:int;
		private var rentalsCount:int;
		
		public function init():void
		{
			var ref:UIComponent = new UIComponent();
			//pass the refernce to your cloudmade map as the second var
			provider = new CloudMadeProvider(apiKey, "10632", CloudMadeProvider.SIZE_256);
			map = new UMap();
			map.setSize(600, 500);
			map.setProvider(provider);
			ref.addChild(map);
			//attach to the canvas
			mapCanvas.addChild(ref);
			ref.focusManager.deactivate();
			//listen for when the map is ready
			map.addEventListener(MapEvent.READY, mapReady);
		//	map.addEventListener(MapEvent.CLICK, mapClicked);
			
			
		}
		private function mapClicked(m:MapEvent):void
		{
			trace("lat:"+m.latlng.lat+"   lng:"+m.latlng.lng);
			
			//map.setBounds(new LatLngBounds(new LatLng(60.5, -17), new LatLng(48, 9)));
		}
		public function showProducts(d:*):void
		{
			
		}
	
		protected function getMMStyle():Object
		{
			var gradStyle:MarkerStyle = new MarkerStyle();
			gradStyle.fill = GeometryStyle.RGB;
			gradStyle.fillRGB =  multiMarkerColor;
			gradStyle.fillAlpha = 1;
			return gradStyle;
		}
		public function showResults(d:XML):void
		{
			salesCount = 0;
			rentalsCount = 0;
			
			//create and style markermanager that displays when multiple markers are in the same location
			markerManager = new MarkerManager();
			markerManager.expandedGroupRadius = 30;
			markerManager.groupRadius = 10;
			markerManager.markerActualSize = 3;//100;//20;
			markerManager.markerZoomScale = 1;
			markerManager.openGroupAction = MarkerManager.OPEN_CLICK;
			markerManager.autoClose = true;
			markerManager.fadingStrength = .8;
			
			var markerManagerStyle:Object = new Object();
			var baloonStyle:BaloonStyle = new BaloonStyle(); 
			baloonStyle.fillGradient.colors = [0x330000, 0xEE0000]; 
			baloonStyle.fill = GeometryStyle.RGB; 
			baloonStyle.fillAlpha = 1; 
			baloonStyle.fillRGB = 0xffffff; 
			baloonStyle.strokeRGB = 0x0; 
			baloonStyle.strokeAlpha = 1;
			baloonStyle.strokeThickness = 1;
			markerManagerStyle.baloonStyle = baloonStyle; 
			markerManagerStyle.baloon = true; 
			markerManager.setStyle(markerManagerStyle); 
			map.addManager(markerManager);
			
			//add the markers
			for (var i:uint = 0; i<d.children().length(); i++){
				
				var l:XML = d..row[i] as XML;
				var type:String = l..type;
				if (type == "sale")
				{
					salesCount ++;
				}
				if (type == "rental")
				{
					rentalsCount ++;
				}
				trace("pos:"+l..position);
				var posStr:String = l..position;
				var a:Array = posStr.split(",");
				var pos:LatLng = new LatLng(a[0], a[1]);
				var prodID:int = Number(l..product_id);
				//add data to info object
				var infoObj:Object = new Object();
				infoObj.title = l..customer_name;
				var infoCopy:String = "";
				for (var j:uint = 0 ; j<l.children().length(); j++){
					var nam:String = l.children()[j].name();
					var val:String = l.children()[j].valueOf().toString();
					infoCopy += nam+": "+val+"\r";
				}
				infoObj.content = infoCopy;//"Info window content...<br/>can be multiline<br/>and contain <b><u>HTML</u></b> tags.";
				
				
				
				var marker:SignMarker = new SignMarker({position:pos, infoParam:infoObj}, null, l..product_id);
				
				map.addOverlay(marker);	
			}
			//update rental/sales counts
			sales.text = salesCount.toString();
			rentals.text = rentalsCount.toString();
		}
		
		private function mapReady(e:MapEvent):void
		{
			trace("map ready");
			map.setCenter(new LatLng(56, -3));
			map.setZoom(5);
			//map.setBounds(new LatLngBounds(new LatLng(60.5, -17), new LatLng(48, 9)));
			//start working with the map, adding markers etc.
		}
		public function cleanUp():void
		{
			sales.text = "--";
			rentals.text = "--";
			clearMarkers();
		}
		
		
		

		protected function vSliderChanged(event:FlexEvent):void
		{
			var val:uint = (event.currentTarget as VSlider).value;
			// TODO Auto-generated method stub
			trace("slider changed:"+val);
			map.setZoom(val, true);//(immediately)
			
		}
		public function clearMarkers():void
		{
			var ov_ar:Array = map.getOverlays();
			for (var i:uint = 0; i<ov_ar.length; i++){
				var oL:* = ov_ar[i];
				map.removeOverlay(oL);
			}
		}

	]]>
</fx:Script>
	<fx:Declarations>	
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
		<s:Group>
			
			<s:VSlider id="zoomSlider" value="5" minimum="2" maximum="15" verticalCenter="0" height="350" changeEnd="vSliderChanged(event)"/>
			<s:Group>
				<mx:Canvas id="mapCanvas" width="600" height="500" x="50" y="0"/>
				<s:Group right="20" y="20">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						<mx:Label text="Sales:" />
						<mx:Label id="sales" text="--" />
					</s:Group>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						<s:Label text="Rentals:"/>
						<s:Label id="rentals" text="--" />	
					</s:Group>	
				</s:Group>
				
			</s:Group>
		</s:Group>
		
		
	
</s:Group>
