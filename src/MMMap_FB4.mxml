<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*"
			   xmlns:net="flash.net.*"
			   
			   creationComplete="creationCompleteHandler(event)"
			   addedToStage="application1_addedToStageHandler(event)"
			   currentState="login" minWidth.State1="955" minHeight.State1="600">
	<s:states>
		<s:State name="State1"/>
		<s:State name="portal"/>
		<s:State name="login"/>
		<s:State name="loggingIn"/>
		<s:State name="account_settings"/>
		<s:State name="updating_settings"/>
		<s:State name="updating_password"/>
		<s:State name="requesting_results"/>
		<s:State name="updating_email"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:ArrayCollection id="productList"/>
		<s:ArrayCollection id="salesType">
			<s:source>
				<fx:Array>
					<fx:Object label="Sales" data="0" />
					<fx:Object label="Rentals" data="1" />
					<fx:Object label="All" data="2" />
				</fx:Array>
			</s:source>
		</s:ArrayCollection>
		<s:ArrayCollection id="customerList">
			<!--<s:source>
				<fx:Array>
					<fx:Object label="John Ridley" data="85" />
					<fx:Object label="Gateshead Council" data="85" />
					<fx:Object label="Newcastle General Hospital" data="85" />
				</fx:Array>
			</s:source> -->
		</s:ArrayCollection>
		<net:FileReference id="fileReference" />
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import com.adobe.crypto.MD5;
		
		import model.Model;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.FlexEvent;
		import mx.printing.FlexPrintJob;
		import mx.printing.FlexPrintJobScaleType;
		
		[Bindable]
		protected var startingDate:Date;
		[Bindable]
		protected var endingDate:Date;
		
		private var csv:String;
		
		private var saleTypeStrings:Array = ["sale", "rental",  "all"];

		public var myModel:Model;
		
		private var newPreferences:Object;
		
		public function setPreferences(o:Object):void
		{
			currentState = "portal";
			if (o.customer>-1) {
				customers.selectedIndex = Number(o.customer);	
			}
			if (o.product>-1){
				products.selectedIndex = Number(o.product);
			}
			if (o.fromDate.length>0){
				startDateField.selectedDate = getDateFromString(o.fromDate);				
			}else{
				startDateField.selectedDate = null;
			}
			if (o.toDate.length>0){
				endDateField.selectedDate = getDateFromString(o.toDate);
			}else{
				endDateField.selectedDate = null;
			}
			if (o.saleType.length>0){
				saleTypes.selectedIndex = getSaleType(o.saleType);
			}
			
		}
		private function getSaleType(s:String):Number
		{
			var retN:Number = saleTypeStrings.indexOf(s);
			trace("returning sale type:"+retN+"  string:"+saleTypeStrings[retN]);
			return retN;
		}
		private function getDateFromString(s:String):Date
		{
			var retD:Date;
			var a:Array = s.split("-");
			var year:String = a[0].toString();
			var month:Number = Number(a[1])-1;
			//todo-check with mike that the dates in teh dbase dont have 0 for jan
			var date:String = a[2].toString();
			retD = new Date(year, month, date);
			return retD;
		}
		private function showProducts(d:*):void
		{
			//logic to parse data and sat arrayC
			mapDisplay.showProducts(d);
		}
		
		private function showResults(d:*):void
		{
			mapDisplay.showResults(d);
		}
		private function validateDates():void
		{
			var sD:Date = startDateField.selectedDate;
			var eD:Date = endDateField.selectedDate;
			if (eD != null && sD!=null){
				if (eD.valueOf()<sD.valueOf()){
					showAlert("Please alter dates", "The end date must be after the start date"); 	
				}else{
					currentState = "requesting_results";
					//if the dates are valid request the data
					myModel.requestResults(customers.selectedIndex,products.selectedIndex, startDateField.selectedDate, endDateField.selectedDate, saleTypeStrings[saleTypes.selectedIndex]);
				}
			}else{
				currentState = "requesting_results";
				myModel.requestResults(customers.selectedIndex,products.selectedIndex, startDateField.selectedDate, endDateField.selectedDate, saleTypeStrings[saleTypes.selectedIndex]);
			}
			
		}
		//validates dates for account settings
		private function checkSetDates():Boolean
		{
			var sD:Date = startDateFieldSet.selectedDate;
			var eD:Date = endDateFieldSet.selectedDate;
			//only need to check dates are in correct order
//			if (eD==null && sD==null){
//				return true;
//			}
//			if (eD==null || sD==null){
//				//only start date is set
//				showAlert("Please alter dates","The from and to dates must be in the correct order and you must define both or neither", true, showAccountSettings);
//				return false;
//			}
			if (eD!=null || sD!=null){
				if (eD.valueOf()<sD.valueOf()){
					showAlert("Please alter dates","The from and to dates must be in the correct order", true, showAccountSettings);
					return false;
				}else{
					return true;
				}
			}else{
				return true;
			}
		}
		public function showAccountSettings(a:*):void
		{
			currentState = "account_settings";
		}
		public function showAlert(title:String, msg:String, okButton:Boolean = false, fn:Function = null):void
		{
//			var alertFn:Function = logOut;
//			if (!logO){
//				alertFn = null;
//			}
			Alert.show(msg, title, Alert.OK, this, fn);
		}
		public function logOut(a:*):void
		{
			trace("logOut");
			try{
				mapDisplay.clearMarkers();
			}catch(e:*){
				
			}
			currentState = "login";
		}
		
		
		private function requestData(event:Event):void
		{
			validateDates();	
		}
	

		protected function exportExcel_clickHandler(event:MouseEvent):void
		{
			csv = myModel.getCSV();
			fileReference.save(csv, "sales_map.csv");Â 
		}

		protected function print_clickHandler(event:MouseEvent):void
		{
			var printJob:FlexPrintJob = new FlexPrintJob();
			if (printJob.start())
			{
				printJob.addObject(this, FlexPrintJobScaleType.SHOW_ALL);
				printJob.send();
			}
		}


		protected function update_clickHandler(event:MouseEvent = null):void
		{
			try{
				mapDisplay.clearMarkers();
			}catch(e:*){
				//markers dont exisy on login
			}
			validateDates();
		}


		protected function login_clickHandler(event:MouseEvent):void
		{
			currentState = "loggingIn";
			//model.login(username.text, password.text);
			myModel.logMeIn(username.text, password.text);
		}
		protected function creationCompleteHandler(event:FlexEvent):void
		{
			trace("creation complete");	
			myModel = new Model(this);
		}


		protected function logout_clickHandler(event:MouseEvent):void
		{
			mapDisplay.cleanUp();
			username.text = "";
			password.text = "";
			currentState = "login";
		}


		protected function updateSet_clickHandler(event:MouseEvent):void
		{
			trace("updating settings pressed");
			currentState = "updating_settings";
			if (checkSetDates()){
				updatePreferences();	
			}
			
		}
		private function updatePreferences():void
		{
			newPreferences = new Object();
			if (customersSet.selectedIndex>-1) {
				newPreferences.customer = customersSet.selectedIndex;	
				trace("customer set:"+newPreferences.customer);
			}else{
				newPreferences.customer = "-1";
			}
			if (productsSet.selectedIndex>-1){
				newPreferences.product = productsSet.selectedIndex;
				trace("product set:"+newPreferences.product);
			}else{
				newPreferences.product = "-1";
			}
			if (startDateFieldSet.selectedDate){
				newPreferences.fromDate = getStringFromDate(startDateFieldSet.selectedDate);
				trace("from date set:"+newPreferences.fromDate);
			}else{
				newPreferences.fromDate = "";
			}
			if (endDateFieldSet.selectedDate){
				newPreferences.toDate = getStringFromDate(endDateFieldSet.selectedDate);
				trace("to date set:"+newPreferences.toDate);
			}else{
				newPreferences.toDate = "";
			}
			if (saleTypesSet.selectedIndex>-1){
				newPreferences.saleType = getSaleString(saleTypesSet.selectedIndex);				
				trace("sales type set:"+newPreferences.saleType);
			}else{
				newPreferences.saleType = "-1";
			}
			myModel.setPreferences(newPreferences);
		}
		private function getSaleString(i:int):String
		{
			var retS:String = saleTypeStrings[i];
			if (retS ==null) retS = "";
			return retS;
		}
		private function getStringFromDate(d:Date):String{
			var retS:String;
			retS = d.getFullYear()+"-"+(d.getMonth()+1)+"-"+d.getDate();
			trace("returning date string:"+retS);
			return retS;
		}

		protected function accountSettings_clickHandler(event:MouseEvent):void
		{
			// TODO Auto-generated method stub
			currentState = "account_settings";
		}


		protected function button1_clickHandler(event:MouseEvent):void
		{
			currentState = "portal";
		}


		protected function clearDates_clickHandler(event:MouseEvent):void
		{
			endDateFieldSet.selectedDate = null;
			startDateFieldSet.selectedDate = null;
		}
		protected function clearSelectedDatesHandler(event:MouseEvent):void
		{
			endDateField.selectedDate = null;
			startDateField.selectedDate = null;
		}
	

		protected function updatePassword_clickHandler(event:MouseEvent):void
		{
			currentState = "updating_password";
			validateNewPassword();
		}
		private function validateNewPassword():void
		{
			if (MD5.hash(currentPassword.text)==myModel.md5Pword){
				if (confirmPassword.text.length<1){
					showAlert("No password entered", "Please enter a new password", true, showAccountSettings);
					return;
				}
				if (confirmPassword.text == newPassword.text){
					trace("password entered is correct, updating new password...");
					myModel.setNewPassword(confirmPassword.text);
				}else{
					showAlert("Passwords do not match", "The new password does not match the confirmation", true, showAccountSettings);
				}
				
			}else{
				
				showAlert("Incorrect Password", "Please enter your existing password", true, showAccountSettings);
			}
		}

		public function showPortal(e:Event):void
		{
			currentState = "portal";
		}
		protected function application1_addedToStageHandler(event:Event):void
		{
			
		}
		public function clearPasswords():void
		{
			currentPassword.text = "";
			newPassword.text = "";
			confirmPassword.text = "";
		}
		
		private function updateEmailAddress(e:MouseEvent):void
		{
			currentState = "updating_email";
			if (newEmail.text == confirmEmail.text){
					myModel.setNewEmail(newEmail.text);			
			}else{
				showAlert("The email address does not match", "", true, showAccountSettings);
			}
		}

	]]>
</fx:Script>
	<s:VGroup x="10" y="10" width="700" height="100%" includeIn="State1,portal">
			<s:Group width="700">
				
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:Label text="Start date:"/>
				<mx:DateField id="startDateField"/>
				<mx:Spacer width="20"/>
				<s:Label text="End date:"/>
				<mx:DateField id="endDateField" />
				
				<s:Button includeIn="portal" label="Clear Dates" click="clearSelectedDatesHandler(event)" id="clearSelectedDates"/>
				<s:Group width="700">
					<s:layout>
						<s:HorizontalLayout/>
					</s:layout>
					<s:Label text="Product:" />
					<s:ComboBox id="products" dataProvider="{productList}" labelField="name"/>
				</s:Group>
			</s:Group>
			<mx:Spacer height="30"/>
			<s:Group width="700">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:Label text="Sale type:"/>
				<s:ComboBox id="saleTypes" dataProvider="{salesType}"/>
				<mx:Spacer width="20"/>
				<s:Label text="Customer:"/>
				<s:ComboBox id="customers" dataProvider="{customerList}" labelField="name"/>
				<mx:Spacer width="20"/>
				<s:Button id="update" label="Update" right="0" click="update_clickHandler(event)" label.portal="Update Map"/>
			</s:Group>
			<mx:Spacer height="10"/>
			<s:Group x="300">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:Button id="exportExcel" label="Export Excel CSV" click="exportExcel_clickHandler(event)"/>
				<s:Button id="print" label="Print" click="print_clickHandler(event)"/>
				<s:Button label="Logout" id="logout" click.portal="logout_clickHandler(event)"/>
			</s:Group>
			<mx:Spacer height="10"/>
			<s:Button includeIn="portal" label="Account Settings" id="accountSettings" click="accountSettings_clickHandler(event)"/>
		<local:MapDisplay id="mapDisplay"/>
		
	</s:VGroup>
	<s:List 
		id="productsLister" x="120" maxWidth="700" y="705"
			itemRenderer="HListRenderer" includeIn="State1,portal">
		<s:dataProvider>
			<s:ArrayCollection>
				<fx:Object name="Stop Sign" photo="images/stopSign.jpg" />
				<fx:Object name="Go Sign" photo="images/goSign.jpg" />
				<fx:Object name="Falling Rocks" photo="images/fallingRocks.jpg" />
				<fx:Object name="Road Works" photo="images/roadWorks.jpg" />
				<fx:Object name="Speed Bumps" photo="images/speedBumps.jpg" />
				<fx:Object name="Danger!" photo="images/danger.jpg" />
				<fx:Object name="Slow Down" photo="images/slowDown.jpg" />
			</s:ArrayCollection>
		</s:dataProvider>
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		
	</s:List>
	
	<s:Panel tabEnabled="false" includeIn="loggingIn,login,requesting_results,updating_email,updating_password,updating_settings" width="250" height="200" horizontalCenter="-0" verticalCenter="0" title="Login" title.updating_settings="Updating Settings" title.updating_password="Updating Password" title.requesting_results="Requesting Results" title.updating_email="Updating Email">
		<s:TextInput y="35" width="200" horizontalCenter="-1" id="username" includeIn="login" text="alidrongo"/>
		<s:Label x="24" y="19" text="Username" includeIn="login"/>
		<s:Label x="24" y="69" text="Password" includeIn="login"/>
		<s:TextInput y="88" width="200" horizontalCenter="-1" id="password" includeIn="login" displayAsPassword="true" text="password"/>
		<s:Button x="88" y="126" label="Login" id="login" click="login_clickHandler(event)" includeIn="login" />
		<s:Label includeIn="loggingIn,requesting_results,updating_email,updating_password,updating_settings" text="Logging in....." horizontalCenter="0" verticalCenter="0" text.updating_settings="Updating settings...." text.updating_password="Updating password...." text.requesting_results="Requesting results.....&#xd;" text.updating_email="Updating email...."/>
	</s:Panel>
	<s:Panel tabEnabled="false" includeIn="account_settings" x="10" y="10" width="872" height="330" title="Account Settings">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<mx:Spacer height="20"/>
		<s:Group width="700">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			
			<s:Label text="Start date:"/>
			<mx:DateField id="startDateFieldSet"/>
			<mx:Spacer width="20"/>
			<s:Label text="End date:"/>
			<mx:DateField id="endDateFieldSet" />
			<s:Button label="Clear Dates" id="clearSelectedDatesBtn" click="clearSelectedDatesHandler(event)"/>
			<mx:Spacer width="20"/>
			<s:Group width="700">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:Label text="Product:" />
				<s:ComboBox id="productsSet" dataProvider="{productList}" labelField="name"/>
			</s:Group>
		</s:Group>
		<mx:Spacer height="10"/>
		<s:Group width="700">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Label text="Sale type:"/>
			<s:ComboBox id="saleTypesSet" dataProvider="{salesType}" x="99" y="-1"/>
			<mx:Spacer width="20"/>
			<s:Label text="Customer:" x="282" y="2"/>
			<s:ComboBox id="customersSet" dataProvider="{customerList}" labelField="name" x="341" y="0"/>
			<mx:Spacer width="20"/>
		</s:Group>
		
		<s:Button id="updateSet" label="Update Settings" click="updateSet_clickHandler(event)"/>
		<mx:Spacer height="10"/>
		<s:Group>
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Label text="Current Password:"/>
			<s:TextInput id="currentPassword"/>
			<mx:Spacer width="20"/>
			<s:Label text="New Password:"/>
			<s:TextInput id="newPassword"/>
			<mx:Spacer width="20"/>
			<s:Label text="Re-type new password:"/>
			<s:TextInput id="confirmPassword"/>
		</s:Group>
		<s:Button label="Update Password" id="updatePassword" click="updatePassword_clickHandler(event)"/>
		<s:Group>
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Label text="Set new email address:"/>
			<s:TextInput id="newEmail" width="200"/>
			<mx:Spacer width="20"/>
			<s:Label text="Confirm email:"/>
			<s:TextInput id="confirmEmail" width="200"/>
			<mx:Spacer width="20"/>
		</s:Group>
		<s:Button label="Update Email" id="updateEmail" click="updateEmailAddress(event)"/>
		<mx:Spacer height="10"/>
		<s:Button label="Close" click="button1_clickHandler(event)"/>
	</s:Panel>
	
</s:Application>
